{"version":3,"sources":["search/reducers/initialState.js","search/reducers/bankSearchReducer.js","search/constants/BankConstants.js","search/reducers/index.js","search/store/configStore.js","search/component/SelectCityComponent.js","search/component/blankPage.js","search/component/pagination.js","search/component/BankList.js","search/component/SearchComponent.js","search/component/loader.js","search/component/BankSearchIndex.js","services/bank.api.js","utils/api_utils.js","search/actions/bankSearchActions.js","search/container/BankSearchIndexContainer.js","search/BankSearchStartup.js","App.js","serviceWorker.js","index.js"],"names":["selectedCity","searchTerm","loader","error","hasError","message","banks","displayingBanks","availableCities","favourites","showFavourites","cache","filterBanks","nextState","value","search","toLowerCase","length","filter","bank","Object","keys","toString","includes","showBanksMatching","favFilter","ifsc","showFavouriteBanks","bankSearchReducer","state","initialState","action","assign","type","toUpperCase","window","localStorage","getItem","split","f","setItem","rootReducer","combineReducers","bankSearch","configureStore","props","createStore","applyMiddleware","thunk","SelectCityComponent","this","options","onCitySelect","className","data-toggle","aria-haspopup","aria-expanded","x-placement","style","position","transform","top","left","willChange","map","option","onClick","e","key","Component","BankPage","icon","icons","size","React","Pagination","abs","num","getStartPage","currentPage","visiblePageRange","mod","start","count","Array","apply","element","index","totalSize","handleSize","pageCount","visibleRange","pageNumbers","range","data-display","showOptions","role","aria-label","onPrevPage","disabled","page","onPage","onNextPage","defaultProps","BankList","updateIndex","startIndex","endIndex","setState","handleSizeChange","renderFavIcon","undefined","toggleFavourite","renderBanks","Fragment","colSpan","onChange","handleShowFavourites","checked","slice","id","bank_name","branch","renderNoBanks","prevProps","prevState","SearchComponent","target","placeholder","Loader","BankSearchIndex","handleCity","city","actions","fetchBanks","handleSearch","term","toggleShowFavourite","updateFavourites","BankAPI","params","onSuccess","onFailure","settings","$","ajax","done","data","console","log","fail","apiCall","url","startsWith","makeUrl","param","makeParams","onFetchSuccess","dispatch","res","connect","bindActionCreators","BankSearchStartup","store","configStore","BankSearchIndexContainer","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bfed931.chunk.js","sourcesContent":["export default {\n    selectedCity: '',\n    searchTerm: '',\n    loader: false,\n    error: {\n        hasError: false,\n        message: ''\n    },\n    banks: [],\n    displayingBanks: [],\n    availableCities: [\n        \"Bangalore\",\n        \"Mumbai\",\n        \"Coimbatore\",\n        \"Pune\",\n        \"Delhi\",\n    ],\n    favourites: {},\n    showFavourites: false,\n    cache: {}\n}","import initialState from \"./initialState\";\nimport * as types from \"../constants/BankConstants\";\n\nconst showBanksMatching = (banks, value) => {\n    const search = value.toLowerCase();\n    if (search.length <= 0 || banks.length <= 0) {\n        return banks;\n    }\n\n\n    return banks.filter(bank => {\n        for (let key of Object.keys(bank)) {\n            if (bank[key].toString().toLowerCase().includes(search))\n                return true;\n        }\n        return false;\n    });\n}\n\nconst showFavouriteBanks = (nextState, banks, favFilter) => {\n    if (favFilter)\n        return banks.filter(bank => nextState.favourites[bank.ifsc])\n    return banks;\n}\n\nconst filterBanks = nextState => {\n    let banks = showBanksMatching(nextState.banks, nextState.searchTerm);\n    banks = showFavouriteBanks(nextState, banks, nextState.showFavourites)\n    return banks;\n}\n\nconst bankSearchReducer = (state = initialState, action) => {\n    let nextState = Object.assign({}, initialState, state)\n    nextState.error = Object.assign({}, initialState.error, nextState.error);\n\n    switch (action.type) {\n        case types.loader:\n            nextState.loader = true;\n            break;\n        case types.unloader:\n            nextState.loader = false;\n            break;\n        case types.handleCity:\n            nextState.selectedCity = action.value;\n            break;\n        case types.fetchBanksSuccess:\n            nextState.banks = action.value;\n            nextState.cache[nextState.selectedCity.toUpperCase()] = action.value\n            nextState.displayingBanks = filterBanks(nextState);\n            break;\n        case types.fetchBankFailed:\n            nextState.error.hasError = true;\n            nextState.error.message = action.value;\n            break;\n        case types.handleSearch:\n            nextState.searchTerm = action.value;\n            nextState.displayingBanks = filterBanks(nextState);\n            break;\n        case types.updateFavourites:\n            let favourites = window.localStorage.getItem('favourites');\n            if (favourites) {\n                for (let f of favourites.split(\",\")) {\n                    nextState.favourites[f.toString()] = true;\n                }\n            }\n            nextState = { ...nextState }\n            break;\n        case types.togglFavourite:\n            nextState.favourites[action.value] = !!!nextState.favourites[action.value]\n            if (!nextState.favourites[action.value]) {\n                delete nextState.favourites[action.value]\n                nextState.displayingBanks = filterBanks(nextState);\n            }\n            window.localStorage.setItem('favourites', Object.keys(nextState.favourites));\n            nextState = { ...nextState };\n            break;\n        case types.toggleShowFavourite:\n            nextState.showFavourites = !nextState.showFavourites;\n            nextState.displayingBanks = filterBanks(nextState);\n            break;\n        default:\n            return nextState;\n    }\n    return nextState;\n}\nexport default bankSearchReducer;","export const loader = \"loader\";\nexport const unloader = \"unloader\";\nexport const fetchBanksSuccess = \"fetch-banks-success\";\nexport const fetchBankFailed = \"fetch-banks-failed\";\nexport const handleCity = \"handle-city\";\nexport const handleSearch = \"handle-search\";\nexport const togglFavourite = \"toggle-favourite\";\nexport const toggleShowFavourite = \"toggle-show-favourite\";\nexport const updateFavourites = \"update-favourites\";","import {combineReducers} from 'redux';\nimport bankSearchReducer from './bankSearchReducer';\n\n/** combine reducer to map multiple reducers */\nconst rootReducer = combineReducers({bankSearch: bankSearchReducer});\n\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from \"../reducers/index\";\n\n/** \n * This config store provides configuration props to the react components\n * Thunk is used as middleware\n * maps reducer with props from api's\n */\nconst configureStore = (props) => (\n  createStore(rootReducer, props, applyMiddleware(thunk))\n);\n\nexport default configureStore;","import React, { Component } from 'react';\n\nclass SelectCityComponent extends Component {\n    render() {\n        const {selectedCity, options, onCitySelect} = this.props;\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <button className=\"nav-link btn btn-outline-success dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">{selectedCity === '' ? 'Choose city' : selectedCity}</button>\n                <div className=\"dropdown-menu\" x-placement=\"bottom-start\" style={{ position: \"absolute\", transform: 'translate3d(0px, 38px, 0px)', top: 0, left: 0, willChange: 'transform' }}>\n                    {options.map(option => <button className=\"dropdown-item\" onClick={e => onCitySelect(option)} key={option}>{option}</button>)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SelectCityComponent;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as icons from '@fortawesome/free-solid-svg-icons';\n\nclass BankPage extends React.Component {\n    render() {\n        return <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-5 text-center justify-content-center\">\n                    <FontAwesomeIcon icon={icons.faNewspaper} size=\"10x\" />\n                </div>\n                <div className=\"col-7\">\n                    <div className=\"p-3\">\n                        <p>Oops, Seems like there's nothing to be displayed here</p>\n                        <p>Try doing the following actions</p>\n                        <ul>\n                            <li>Select a city if you have not selected one</li>\n                            <li>If the city is selected, Please try with someother city</li>\n                            <li>Try changing the filters</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nexport default BankPage;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as icons from \"@fortawesome/free-solid-svg-icons\";\n\nclass Pagination extends React.Component {\n    range(start, count) {\n        return Array.apply(0, Array(count))\n            .map((element, index) => index + start);\n    }\n\n    abs = num => {\n        return num > 0 ? num : num*-1;\n    }\n\n    getStartPage = (currentPage, visiblePageRange) => {\n        let mod = (currentPage - 1) % visiblePageRange;\n        if(mod === 0) {\n            return currentPage;\n        }\n\n        return this.abs(mod - (visiblePageRange - mod));\n    }\n\n    render() {\n        const { totalSize, size } = this.props;\n        let {currentPage} = this.props;\n        const { handleSize } = this.props;\n        let pageCount = totalSize / size | (totalSize > 0 ? 1 : 0);\n\n        const visiblePageRange = 5;\n        currentPage = currentPage < pageCount ? currentPage : pageCount;\n        let visibleRange = (currentPage + visiblePageRange) < pageCount ? visiblePageRange : (pageCount - currentPage + 1);\n        let pageNumbers = this.range(currentPage, visibleRange);\n\n        if (pageCount <= visiblePageRange) {\n            return null;\n        }\n\n        return (\n            <div className=\"d-flex flex-row flex-wrap justify-content-between\">\n                <div className=\"d-inline-block mb-lg-2\">\n                    <div className=\"btn-group\">\n                        <button type=\"button\" className=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" data-display=\"static\" aria-haspopup=\"true\" aria-expanded=\"false\">{size}</button>\n                        <span className=\"p-2\">of {totalSize} results</span>\n                        <div className=\"dropdown-menu\">\n                            {this.props.showOptions.map(option => <button\n                                onClick={e => handleSize(option)}\n                                key={option}\n                                className=\"dropdown-item\">\n                                {option}\n                            </button>\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n                    <div className=\"btn-group\" role=\"group\" aria-label=\"First group\">\n                        <button type=\"button\" onClick={e => this.props.onPrevPage()} className=\"btn btn-success\" disabled={(currentPage - visiblePageRange) <= 0}><FontAwesomeIcon icon={icons.faArrowLeft} /></button>\n                        {\n                            pageNumbers.map(page => <button key={page} onClick={e => this.props.onPage(page)} className={`btn btn-secondary ${ currentPage === page ? \"active\": \"\" }`}>{page}</button>)\n                        }\n                        <button type=\"button\" onClick={e => this.props.onNextPage()} className=\"btn btn-success\" disabled={(currentPage + visiblePageRange) >= pageCount}><FontAwesomeIcon icon={icons.faArrowRight} /></button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nPagination.defaultProps = {\n    showOptions: [5, 10, 50]\n}\n\nexport default Pagination;","import React, { Component } from 'react';\nimport BlankPage from \"./blankPage\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as icons from '@fortawesome/free-solid-svg-icons';\nimport Pagination from './pagination';\n\nclass BankList extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            size: 10,\n            page: 1,\n            startIndex: 0,\n            endIndex: 10,\n        }\n    }\n\n    updateIndex = () => {\n        const { page, size } = this.state;\n        const startIndex = size * (page - 1);\n        const endIndex = startIndex + size;\n\n        this.setState({startIndex, endIndex});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.showFavourites !== this.props.showFavourites) {\n            this.setState({page: 1, size: 10}, this.updateIndex)\n        }\n    }\n\n    onNextPage = () => {\n        this.setState({ ...this.state, page: this.state.page + 5 }, this.updateIndex);\n    }\n\n    onPrevPage = () => {\n        this.setState({ ...this.state, page: this.state.page - 5 }, this.updateIndex);\n    }\n\n    onPage = page => {\n        this.setState({page}, this.updateIndex);\n    }\n\n    handleSizeChange = size => {\n        this.setState({\n            size,\n            page: 1\n        }, this.updateIndex);\n    }\n\n    renderFavIcon = bank => {\n        if (this.props.favourites[bank.ifsc] !== undefined && this.props.favourites[bank.ifsc])\n            return <td onClick={e => this.props.toggleFavourite(bank.ifsc)} className=\"\"><FontAwesomeIcon icon={icons.faHeart} className=\"cursor-pointer text-danger\" /></td>\n        else\n            return <td onClick={e => this.props.toggleFavourite(bank.ifsc)} className=\"\"><FontAwesomeIcon className=\"cursor-pointer\" icon={icons.faHeartBroken} /></td>\n    }\n\n    renderBanks = banks => {\n        return (\n            <React.Fragment>\n                <table className=\"table table-dark table-responsive-lg\">\n                    <thead>\n                        <tr>\n                            <th>IFSC</th>\n                            <th>Bank name</th>\n                            <th>Branch</th>\n                            <th colSpan=\"3\">\n                                <input onChange={this.props.handleShowFavourites} type=\"checkbox\" className=\"form-check-input\" checked={this.props.showFavourites} /> Favourites\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            banks.length > 0 ?\n                                banks.slice(this.state.startIndex, this.state.endIndex).map(bank => {\n                                    return (\n                                        <tr key={`bank-${bank.ifsc}-${bank.id}`}>\n                                            <td>{bank.ifsc}</td>\n                                            <td>{bank.bank_name}</td>\n                                            <td>{bank.branch}</td>\n                                            {this.renderFavIcon(bank)}\n                                        </tr>\n                                    );\n                                }) :\n                                <tr><td className=\"bg-warning text-center\" colSpan=\"6\">no results</td></tr>\n                        }\n                    </tbody>\n                </table>\n                <Pagination\n                    totalSize={banks.length}\n                    size={this.state.size}\n                    handleSize={this.handleSizeChange}\n                    currentPage={this.state.page}\n                    onNextPage={this.onNextPage}\n                    onPrevPage={this.onPrevPage}\n                    onPage={this.onPage}\n                />\n            </React.Fragment>\n        );\n    }\n\n    renderNoBanks = () => {\n        return <BlankPage />\n    }\n\n    render() {\n        const { banks } = this.props;\n        return (banks != null && banks.length > 0) || this.props.showFavourites ? this.renderBanks(banks) : this.renderNoBanks();\n    }\n}\n\nexport default BankList;","import React from 'react';\n\nclass SearchComponent extends React.Component {\n    render() {\n        return (\n            <div className=\"d-flex justify-content-center\">\n                <input\n                    value={this.props.value}\n                    onChange={e => this.props.onChange(e.target.value)}\n                    placeholder=\"Search\" \n                    className=\"form-control\" \n                />\n            </div>\n        );\n    }\n}\n\nexport default SearchComponent;","import React, { Component } from 'react';\n\nclass Loader extends Component {\n    render() {\n        return (\n            <div className=\"text-center\">\n                <div className=\"spinner-border text-light\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Loader;\n\n","import React, { Component } from 'react';\nimport SelectCityComponent from './SelectCityComponent';\nimport BankList from './BankList';\nimport SearchComponent from './SearchComponent';\nimport Loader from './loader';\n\nclass BankSearchIndex extends Component {\n    componentDidMount() {\n        this.props.actions.fetchBanks(this.props.bankSearch.cache, \"\");\n        this.props.actions.updateFavourites(); // update the favourite list from local\n    }\n\n    /** Handles as well as fetched bank based on city selection */\n    handleCity = city => {\n        this.props.actions.handleCity(city);\n        this.props.actions.fetchBanks(this.props.bankSearch.cache, city.toUpperCase());\n    }\n\n    /** Filters banks based on search term */\n    handleSearch = term => {\n        this.props.actions.handleSearch(term);\n    }\n\n    /** Toggles between show favourites */\n    handleShowFavourites = e => {\n        this.props.actions.toggleShowFavourite();\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"content-body\">\n                    <SelectCityComponent\n                        selectedCity={this.props.bankSearch.selectedCity}\n                        onCitySelect={this.handleCity}\n                        options={this.props.bankSearch.availableCities}\n                    />\n                    <div className=\"mt-3\">\n                        <SearchComponent \n                            value={this.props.bankSearch.searchTerm}\n                            onChange={this.handleSearch}\n                        />\n                    </div>\n                    <div className=\"mt-3\">\n                        {\n                            this.props.bankSearch.loader ? \n                                <Loader /> : \n                                <BankList \n                                    banks={this.props.bankSearch.displayingBanks}\n                                    showFavourites={this.props.bankSearch.showFavourites}\n                                    favourites={this.props.bankSearch.favourites}\n                                    toggleFavourite={this.props.actions.toggleFavourite}\n                                    handleShowFavourites={this.handleShowFavourites}\n                                />\n                        }\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default BankSearchIndex;","import { makeUrl, makeParams, apiCall } from \"../utils/api_utils\"\n\n\nexport default class BankAPI {\n    static fetchBanks = (params, onSuccess, onFailure) => {\n        let url = makeUrl(\"banks\");\n        const data = makeParams(params);\n        apiCall({url, data}, onSuccess, onFailure);\n    }\n}","/** Wrapper for api requests */\n\nimport $ from 'jquery';\n\nexport const makeParams = params => $.param(params)\n\nexport const makeUrl = url => {\n    const base_url = \"https://vast-shore-74260.herokuapp.com\";\n    if(!url.startsWith(\"/\")) {\n        url = `/${url}`;\n    }\n\n    return base_url + url;\n}\n\n/** ajax call to the given url  */\nexport const apiCall = (settings, onSuccess = null, onFailure = null) => {\n    $.ajax(settings)\n    .done(data => onSuccess != null ? onSuccess(data) : console.log('fetch success'))\n    .fail(e => onFailure != null ? onFailure(e) : console.error('fetch failed'))\n}\n","import BankAPI from \"../../services/bank.api\";\nimport * as types from \"../constants/BankConstants\";\n\n\nconst loader = () => ({ type: types.loader });\nconst unloader = () => ({ type: types.unloader });\n\nconst onFetchSuccess = data => ({\n    type: types.fetchBanksSuccess,\n    value: data\n});\n\nconst onFetchFailed = error => ({\n    type: types.fetchBankFailed,\n    value: error\n});\n\nexport const handleCity = city => ({\n    type: types.handleCity,\n    value: city,\n});\n\nexport const handleSearch = term => ({\n    type: types.handleSearch,\n    value: term\n});\n\nexport const toggleFavourite = bank => ({\n    type: types.togglFavourite,\n    value: bank\n});\n\nexport const updateFavourites = () => ({\n    type: types.updateFavourites\n});\n\nexport const toggleShowFavourite = () => ({\n    type: types.toggleShowFavourite\n});\n\nexport const fetchBanks = (cache, city) => {\n    if (city == null || city.length <= 0) {\n        return dispatch => dispatch(unloader());\n    }\n    return dispatch => {\n        dispatch(loader())\n        if (cache[city]) {\n            dispatch(unloader())\n            return dispatch(onFetchSuccess(cache[city]));\n        } else\n            return BankAPI.fetchBanks(\n                { city },\n                res => {\n                    dispatch(unloader());\n                    dispatch(onFetchSuccess(res));\n                },\n                e => {\n                    dispatch(unloader());\n                    dispatch(onFetchFailed(e));\n                }\n            );\n    }\n}","import BankSearchIndex from '../component/BankSearchIndex';\nimport { bindActionCreators } from 'redux';\nimport * as actions from '../actions/bankSearchActions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({bankSearch: state.bankSearch});\nconst mapDispatchToProps = dispatch => ({actions: bindActionCreators(actions, dispatch)});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BankSearchIndex);","import React from 'react';\nimport { Provider } from 'react-redux';\nimport configStore from \"./store/configStore\";\nimport BankSearchIndexContainer from './container/BankSearchIndexContainer';\n\nconst BankSearchStartup = props => (\n    <Provider store={configStore(props)}>\n        <BankSearchIndexContainer {...props} />\n    </Provider>\n);\n\nexport default BankSearchStartup;","import React from 'react';\nimport BankSearchStartup from './search/BankSearchStartup';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container w-60 h-100\">\n        <BankSearchStartup />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('bank-search-app-dom'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}